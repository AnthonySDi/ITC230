
        <div class="container">
            <div id="root">  </div>
        </div>  

        <!-- NOTE: script type declaration to support JSX -->
        <script type="text/babel">

            // define app container Component
            class booksApp extends React.Component{
            constructor(props){
            // Pass props to parent class 
            super(props);
            // Set initial state w/ hard-coded data
            this.state = {
            data: {{{Books}}},
            filter: "", // search term
            curItem: {} // current selected item
            };

            // bind App context to functions for reference in sub components
            this.onSearchChange = this.onSearchChange.bind(this);
            this.onSave = this.onSave.bind(this);
            this.onDelete = this.onDelete.bind(this);

            }

            // search handler
            onSearchChange(entry) {
            // set search term. react will handle component updates
            this.setState({filter: entry });
            }

            // show item details
            showDetails(event){
            // event.target is list item clicked
            let editItem = this.state.data.find((item) => {
            return item._id == event.target.id;
            });
            this.setState({curItem: editItem});
            }

            // Handle item save
            onSave(newItem) {

            fetch("/api/add/", {
            method: "POST",
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(newItem)
            }).then(res => res.json())
            .then((json) => {

            let newData;
            if (!newItem._id) { // add new item to array
            newData = this.state.data;
            newItem._id = json._id;
            newData.push(newItem);
            } else { // update existing item
            newData = this.state.data.map((item) => {
            if (item._id === newItem._id) {
            item = newItem;
            }
            return item;
            });
            }

            // Update state with new array
            this.setState({data: newData});
            });
            }

            // Handle item delete
            onDelete(id){
            // Filter all items except the one to be removed
            title = title.toLowerCase();
            fetch("api/delete/" + id).then((Response) => {
            return response.json();
            })
            const remainder = this.state.data.filter((item) => {
            return item._id !== id;
            });
            // Update state with new array
            this.setState({data: remainder});
            this.setState({curItem: {}});
            }

            render() {
            // Render JSX
            return <div>
                <PageTitle/>
/*                <SearchForm entry={this.state.entry} onEntryChange={this.onSearchChange} />
                <span>
                    <ItemList items={this.state.data}
                              filter={this.state.filter}
                              show={this.showDetails.bind(this)} />
                </span><span><ItemDetails item={this.state.curItem} save={this.onSave} delete={this.onDelete} /></span>
            */
            </div>;
            }
            }

            // UI elements
            const PageTitle = () => {
                return <h1>Scifi Books</h1>;
            }
           

            class SearchForm extends React.Component {
            constructor(props) {
            super(props);
            this.handleChange = this.handleChange.bind(this);
            }

            handleChange (event) {
            this.props.onEntryChange(event.target.value);
            };

            render() {
            return (
            <div>
                <input type="text" placeholder="Enter Record Title"
                       value={this.props.entry}
                       onChange={this.handleChange} />
            </div>
            );
            }
            };

            const ItemList = ({items, filter, show}) => {
            // return items that match search entry field, or all items if no entry
            const itemNodes = items.map((item) => {
            if (!filter || item.title.includes(filter)) {
            return
            <li id={item._id} key={item._id} onClick={show}>{item.title}</li>
            }
            });
            return <ul>{itemNodes}</ul>;
            }

            class ItemDetails extends React.Component {
            constructor(props) {
            super(props);
            // state values must not be 'undefined', to avoid 'uncontrolled' form warning
            this.state = {
            _id: this.props.item._id || "",
            title: this.props.item.title || "",
            author: this.props.item.author || "",
            price: this.props.item.price || ""
            };
            this.handleChange = this.handleChange.bind(this);
            this.handleSave = this.handleSave.bind(this);
            this.handleDelete = this.handleDelete.bind(this);
            this.handleReset = this.handleReset.bind(this);
            }

            componentWillReceiveProps(nextProps) {
            this.setState({
            _id: this.props.item._id || "",
            name: this.props.item.title || "",
            year: this.props.item.author || "",
            label: this.props.item.price || ""
            });
            }

            handleChange (event) {
            this.setState({[event.target.title]: event.target.value});
            };

            handleSave(event) {
            // pass local state to app-level for saving to data array
            if (this.state.title) { // entries must have at least a name
            this.props.save({_id: this.state._id, title: this.state.title, author: this.state.author, price: this.state.price});
            }
            };

            handleDelete (event) {
            this.props.delete(this.state._id);
            };

            handleReset (event) {
            this.setState({_id:"", title:"", author:"", price:""});
            };

            render() {
            return (
            <div>
                <h3>Details:</h3>
                <input type="hidden" name="_id" value={this.state._id} onChange={this.handleChange} readOnly />
                <input type="text" name="title" placeholder="title" value={this.state.title} onChange={this.handleChange} />
                <input type="text" name="author" placeholder="author" value={this.state.author} onChange={this.handleChange} />
                <input type="text" name="price" placeholder="price" value={this.state.price} onChange={this.handleChange} />
                <p />
                <button onClick={this.handleSave}>Save</button>  <button onClick={this.handleReset}>Reset</button> <button onClick={this.handleDelete}>Delete</button>
            </div>
            );

            }
            }

            ReactDOM.render(<booksApp />, document.getElementById('root'));
            
        </script>      
 