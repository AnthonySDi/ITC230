<!doctype html>
<html lang="en">
    <head>
        <title>Science Fiction Books</title>
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.2.0/jquery.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react-dom.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/babel-core/5.8.34/browser.min.js"></script>
    </head>
    <body>
        <div class="container">
            <div id="root">  </div>
        </div>  

            <!-- NOTE: script type declaration to support JSX -->
<script type="text/babel">

function getISOstring(dateString) {
let date = new Date(dateString);
let month = (date.getMonth() >=9) ? date.getMonth()+1 : "0" + (date.getMonth()+1);
let day = (date.getDay() >=10) ? date.getDay() : "0" + date.getDay();
return date.getFullYear() + "-" + month + "-" + day;
}

// define app container Component
class BooksApp extends React.Component{
constructor(props){
// Pass props to parent class super(props);
// Set initial state w/ hard-coded data
this.state = {
data: {{{Books}}},
filter: "", // search term
curItem: {} // current selected item
};

// bind App context to functions for reference in sub components
this.onSearchChange = this.onSearchChange.bind(this);
this.onChange = this.onChange.bind(this);
this.onSave = this.onSave.bind(this);
this.onDelete = this.onDelete.bind(this);
this.onClear = this.onClear.bind(this);

}

// search handler
onSearchChange(entry) {
// set search term. react will handle component updates
this.setState({filter: entry.toLowerCase() });
}

// show item details
showDetails(event){
// event.target is list item clicked
let editItem = this.state.data.find((item) => {
return item._id == event.target.id;
});
this.setState({curItem: editItem});
}

onClear() {
this.setState({curItem: {}});
}

// handle detail changes
onChange(event) {
var newItem = this.state.curItem;
newItem[event.target.name] = event.target.value
this.setState({curItem: newItem});
}

// Handle item save
onSave() {
let newItem = this.state.curItem;
if (!newItem.title) {
return;
}

fetch("/api/add/", {
method: "POST",
headers: { 'Content-Type': 'application/json' },
body: JSON.stringify(newItem)
}).then(res => res.json())
.then((json) => {

let newData;
if (!newItem._id) { // add new item to array
newData = this.state.data;
newItem._id = json._id;
newData.push(newItem);
} else { // update existing item
newData = this.state.data.map((item) => {
if (item._id === newItem._id) {
item = newItem;
}
return item;
});
}

// Update state with new array
this.setState({data: newData});
});
}

// Handle item delete
onDelete(){
let id = this.state.curItem._id;

fetch("/api/delete/" + id).then((response) => {
return response.json();
}).then((results) => {
// Filter all items except the one to be removed
const remainder = this.state.data.filter((item) => {
return item._id !== id;
});
// Update state with new array
this.setState({data: remainder});
this.setState({curItem: {}});
});
}

render() {
// Render JSX
return
<div>
    <Title />
    <SearchForm entry={this.state.entry} onEntryChange={this.onSearchChange} />
    <ItemList items={this.state.data}
                filter={this.state.filter}
                show={this.showDetails.bind(this)} />
    <ItemDetails item={this.state.curItem} change={this.onChange} />
    <button onClick={this.onSave}>Save</button>  <button onClick={this.onClear}>Reset</button> <button onClick={this.onDelete}>Delete</button>
</div>;
}
}

// UI elements
const Title = () => {
return (
<div>
    <div>
        <h1>Anthony's Book Store</h1>
    </div>
</div>
);
}

class SearchForm extends React.Component {
constructor(props) {
super(props);
this.handleChange = this.handleChange.bind(this);
}

handleChange (event) {
this.props.onEntryChange(event.target.value);
};

render() {
return (
<div>
    <input type="text" placeholder="enter a search term"
            value={this.props.entry}
            onChange={this.handleChange} />
</div>
);
}
};

const ItemList = ({items, filter, show}) => {
// return items that match search entry field, or all items if no entry
const itemNodes = items.map((item) => {
if (!filter || item.title.toLowerCase().includes(filter)) {
return
<li id={item._id} key={item._id} onClick={show}>{item.title}</li>
}
});
return
<ul>{itemNodes}</ul>;
}

class ItemDetails extends React.Component {

render() {
return (
<div>
    <h3>Details:</h3>
    <form onChange={this.props.change}>
        <input type="text" name="title" placeholder="title" value={this.props.item.title || "" } />
        <input type="text" name="author" placeholder="author" value={this.props.item.author || "" } />
        <input type="date" name="pubdate" placeholder="pub. date" value={getISOstring(this.props.item.pubdate) || "" } />
        <p />
    </form>
</div>
);
}
}

ReactDOM.render(
<BooksApp />, document.getElementById('root'));

</script>        
    </body>
</html>